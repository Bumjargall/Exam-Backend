import { ObjectId } from "mongodb";
import User, { IUser, UserRole } from "../models/User";
import jwt from "jsonwebtoken";
import dotenv from "dotenv";
import bcrypt from "bcrypt";
import dbConnect from "../db";
import mongoose from "mongoose";
import { PassThrough } from "stream";

dotenv.config();

export class UserService {
  static async getAllUsers(): Promise<IUser[]> {
    await dbConnect();
    try {
      return await User.find().select("-password").lean<IUser[]>();
    } catch (error) {
      throw new Error(
        `"–•—ç—Ä—ç–≥–ª—ç–≥—á–¥–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:" ${
          error instanceof Error ? error.message : error
        }`
      );
    }
  }
  // –•—ç—Ä—ç–≥–ª—ç–≥—á –±“Ø—Ä—Ç–≥—ç—Ö
  static async createUser(userData: Omit<IUser, "_id">): Promise<IUser> {
    await dbConnect();
    const [emailExists, phoneExists] = await Promise.all([
      User.findOne({ email: userData.email }),
      userData.phone ? User.findOne({ phone: userData.phone }) : null,
    ]);

    if (emailExists) throw new Error("–≠–Ω—ç –∏–º—ç–π–ª –±“Ø—Ä—Ç–≥—ç–ª—Ç—ç–π –±–∞–π–Ω–∞");
    if (phoneExists) throw new Error("–≠–Ω—ç —É—Ç–∞—Å –±“Ø—Ä—Ç–≥—ç–ª—Ç—ç–π –±–∞–π–Ω–∞");

    const user = await User.create(userData);
    return user.toObject();
  }

  // –ò–º—ç–π–ª—ç—ç—Ä —Ö—ç—Ä—ç–≥–ª—ç–≥—á –∞–≤–∞—Ö
  static async findByEmail(email: string): Promise<IUser | null> {
    await dbConnect();
    const user = await User.findOne({ email })
      .select("+password")
      .lean<IUser>();
    return user;
  }

  // –ù—É—É—Ü “Ø–≥ —à–∞–ª–≥–∞—Ö
  static async comparePassword(
    inputPassword: string,
    storedPassword: string
  ): Promise<boolean> {
    return await bcrypt.compare(inputPassword, storedPassword);
  }
  // JWT —Ç–æ–∫–µ–Ω “Ø“Ø—Å–≥—ç—Ö
  static generateToken(user: IUser): string {
    const secretKey = process.env.JWT_SECRET;
    if (!secretKey) throw new Error("JWT_SECRET —Ç–æ—Ö–∏—Ä—É—É–ª–∞–∞–≥“Ø–π –±–∞–π–Ω–∞");

    const payload = {
      id: (user._id as mongoose.Types.ObjectId).toString(),
      email: user.email,
      role: user.role,
    };

    return jwt.sign(payload, secretKey, { expiresIn: "24h" });
  }

  // –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω ID-—Ä –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö
  static async getUserById(userId: string): Promise<IUser | null> {
    await dbConnect();
    if (!ObjectId.isValid(userId)) throw new Error("–•“Ø—á–∏–Ω—Ç—ç–π ID –±–∏—à");
    return await User.findById(userId).select("-password").lean<IUser | null>();
  }

  // –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª —à–∏–Ω—ç—á–ª—ç—Ö
  static async updateUser(
    userId: string,
    userData: Partial<IUser>
  ): Promise<IUser | null> {
    await dbConnect();
    const existingUser = await User.findOne({ phone: userData.phone });
    if (existingUser && existingUser._id.toString() !== userId) {
      throw new Error("–≠–Ω—ç —É—Ç–∞—Å–Ω—ã –¥—É–≥–∞–∞—Ä ”©”©—Ä —Ö—ç—Ä—ç–≥–ª—ç–≥—á –¥—ç—ç—Ä –±“Ø—Ä—Ç–≥—ç–ª—Ç—ç–π –±–∞–π–Ω–∞.");
    }
    if (!ObjectId.isValid(userId)) throw new Error("–•“Ø—á–∏–Ω—Ç—ç–π ID –±–∏—à");
    delete userData.password; // password ”©”©—Ä—á–ª”©—Ö–≥“Ø–π
    return await User.findByIdAndUpdate(userId, userData, {
      new: true,
      runValidators: true,
    })
      .select("-password")
      .lean<IUser | null>();
  }

  // –•—ç—Ä—ç–≥–ª—ç–≥—á —É—Å—Ç–≥–∞—Ö
  static async deleteUser(userId: string): Promise<IUser | null> {
    await dbConnect();
    if (!ObjectId.isValid(userId)) throw new Error("–•“Ø—á–∏–Ω—Ç—ç–π ID –±–∏—à");

    const user = await User.findByIdAndDelete(userId).lean<IUser | null>();
    if (!user) throw new Error("–•—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π");
    return user;
  }

  // Role-—Ä —Ö—ç—Ä—ç–≥–ª—ç–≥—á –∞–≤–∞—Ö
  static async getUsersByRole(role: UserRole): Promise<IUser[]> {
    await dbConnect();
    return await User.find({ role }).select("-password -__v").lean<IUser[]>();
  }

  // –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω role ”©”©—Ä—á–ª”©—Ö
  static async changeUserRole(
    userId: string,
    newRole: UserRole
  ): Promise<Omit<IUser, "password"> | null> {
    await dbConnect();
    if (!mongoose.Types.ObjectId.isValid(userId)) throw new Error("ID –±—É—Ä—É—É");

    const updatedUser = await User.findByIdAndUpdate(
      userId,
      { role: newRole },
      { new: true, runValidators: true }
    )
      .select("-password")
      .lean<Omit<IUser, "password">>();

    if (!updatedUser) throw new Error("–•—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π");
    return updatedUser;
  }

  // üîê –ù—É—É—Ü “Ø–≥ —à–∏–Ω—ç—á–ª—ç—Ö (”©”©—Ä–∏–π–Ω account –¥–æ—Ç—Ä–æ–æ—Å)
  static async updatePassword(
    userId: string,
    newPassword: string
  ): Promise<void> {
    await dbConnect();
    if (!ObjectId.isValid(userId)) throw new Error("ID –±—É—Ä—É—É");

    const hashedPassword = await bcrypt.hash(newPassword, 10);
    await User.findByIdAndUpdate(userId, { password: hashedPassword });
  }

  // üì© –ù—É—É—Ü “Ø–≥ —Å—ç—Ä–≥—ç—ç—Ö —Ç–æ–∫–µ–Ω “Ø“Ø—Å–≥—ç—Ö
  static async generateResetToken(email: string): Promise<string> {
    await dbConnect();
    const user = await User.findOne({ email });
    if (!user) throw new Error("–ò-–º—ç–π–ª –±“Ø—Ä—Ç–≥—ç–ª–≥“Ø–π –±–∞–π–Ω–∞");

    return jwt.sign({ id: user._id }, process.env.JWT_SECRET!, {
      expiresIn: "15m",
    });
  }

  // üõ† Reset password using token
  static async resetPassword(
    token: string,
    newPassword: string
  ): Promise<void> {
    const payload = jwt.verify(token, process.env.JWT_SECRET!) as {
      id: string;
    };
    await dbConnect();

    const user = await User.findById(payload.id);
    if (!user) {
      throw new Error("–•—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π.");
    }

    user.password = newPassword;
    await user.save();
  }

  //role -—ã–≥ –Ω—å —É–Ω—à–∞–∞–¥ —Ç–æ–æ–≥ –Ω—å –±—É—Ü–∞–∞—Ö
  static async getRoleByUsers(role: string): Promise<number> {
    await dbConnect();

    const validRoles = ["student", "teacher", "admin"];
    if (!validRoles.includes(role)) {
      throw new Error("–ë—É—Ä—É—É role –∏–ª–≥—ç—ç–≥–¥–ª—ç—ç");
    }

    const count = await User.countDocuments({ role });
    return count;
  }
}
